// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a LaunchDarkly flag trigger data source.
 *
 * > **Note:** Flag triggers are available to customers on an Enterprise LaunchDarkly plan. To learn more, read about our pricing. To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).
 *
 * This data source allows you to retrieve information about flag triggers from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getFlagTrigger({
 *     id: "<project_key>/<env_key>/<flag_key>/61d490757f7821150815518f",
 *     instructions: {
 *         kind: "turnFlagOff",
 *     },
 *     integrationKey: "datadog",
 * });
 * ```
 */
export function getFlagTrigger(args: GetFlagTriggerArgs, opts?: pulumi.InvokeOptions): Promise<GetFlagTriggerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("launchdarkly:index/getFlagTrigger:getFlagTrigger", {
        "enabled": args.enabled,
        "envKey": args.envKey,
        "flagKey": args.flagKey,
        "id": args.id,
        "instructions": args.instructions,
        "integrationKey": args.integrationKey,
        "projectKey": args.projectKey,
    }, opts);
}

/**
 * A collection of arguments for invoking getFlagTrigger.
 */
export interface GetFlagTriggerArgs {
    /**
     * Whether the trigger is currently active or not.
     */
    enabled?: boolean;
    /**
     * The unique key of the environment the flag trigger will work in.
     */
    envKey: string;
    /**
     * The unique key of the associated flag.
     */
    flagKey: string;
    id: string;
    /**
     * Instructions containing the action to perform when invoking the trigger. Currently supported flag actions are `"turnFlagOn"` and `"turnFlagOff"`. These can be found on the `kind` field nested on the `instructions` attribute.
     */
    instructions?: inputs.GetFlagTriggerInstructions;
    /**
     * The unique identifier of the integration your trigger is set up with.
     */
    integrationKey?: string;
    /**
     * The unique key of the project encompassing the associated flag.
     */
    projectKey: string;
}

/**
 * A collection of values returned by getFlagTrigger.
 */
export interface GetFlagTriggerResult {
    /**
     * Whether the trigger is currently active or not.
     */
    readonly enabled?: boolean;
    /**
     * The unique key of the environment the flag trigger will work in.
     */
    readonly envKey: string;
    /**
     * The unique key of the associated flag.
     */
    readonly flagKey: string;
    readonly id: string;
    /**
     * Instructions containing the action to perform when invoking the trigger. Currently supported flag actions are `"turnFlagOn"` and `"turnFlagOff"`. These can be found on the `kind` field nested on the `instructions` attribute.
     */
    readonly instructions?: outputs.GetFlagTriggerInstructions;
    /**
     * The unique identifier of the integration your trigger is set up with.
     */
    readonly integrationKey?: string;
    readonly maintainerId: string;
    /**
     * The unique key of the project encompassing the associated flag.
     */
    readonly projectKey: string;
    readonly triggerUrl: string;
}
/**
 * Provides a LaunchDarkly flag trigger data source.
 *
 * > **Note:** Flag triggers are available to customers on an Enterprise LaunchDarkly plan. To learn more, read about our pricing. To upgrade your plan, [contact LaunchDarkly Sales](https://launchdarkly.com/contact-sales/).
 *
 * This data source allows you to retrieve information about flag triggers from your LaunchDarkly organization.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as launchdarkly from "@pulumi/launchdarkly";
 *
 * const example = launchdarkly.getFlagTrigger({
 *     id: "<project_key>/<env_key>/<flag_key>/61d490757f7821150815518f",
 *     instructions: {
 *         kind: "turnFlagOff",
 *     },
 *     integrationKey: "datadog",
 * });
 * ```
 */
export function getFlagTriggerOutput(args: GetFlagTriggerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFlagTriggerResult> {
    return pulumi.output(args).apply((a: any) => getFlagTrigger(a, opts))
}

/**
 * A collection of arguments for invoking getFlagTrigger.
 */
export interface GetFlagTriggerOutputArgs {
    /**
     * Whether the trigger is currently active or not.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The unique key of the environment the flag trigger will work in.
     */
    envKey: pulumi.Input<string>;
    /**
     * The unique key of the associated flag.
     */
    flagKey: pulumi.Input<string>;
    id: pulumi.Input<string>;
    /**
     * Instructions containing the action to perform when invoking the trigger. Currently supported flag actions are `"turnFlagOn"` and `"turnFlagOff"`. These can be found on the `kind` field nested on the `instructions` attribute.
     */
    instructions?: pulumi.Input<inputs.GetFlagTriggerInstructionsArgs>;
    /**
     * The unique identifier of the integration your trigger is set up with.
     */
    integrationKey?: pulumi.Input<string>;
    /**
     * The unique key of the project encompassing the associated flag.
     */
    projectKey: pulumi.Input<string>;
}
