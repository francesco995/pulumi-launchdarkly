// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    public static class GetWebhook
    {
        /// <summary>
        /// Provides a LaunchDarkly webhook data source.
        /// 
        /// This data source allows you to retrieve webhook information from your LaunchDarkly organization.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetWebhook.Invoke(new()
        ///     {
        ///         Id = "57c0af6099690907435299",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetWebhookResult> InvokeAsync(GetWebhookArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWebhookResult>("launchdarkly:index/getWebhook:getWebhook", args ?? new GetWebhookArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a LaunchDarkly webhook data source.
        /// 
        /// This data source allows you to retrieve webhook information from your LaunchDarkly organization.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Launchdarkly = Pulumi.Launchdarkly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Launchdarkly.GetWebhook.Invoke(new()
        ///     {
        ///         Id = "57c0af6099690907435299",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetWebhookResult> Invoke(GetWebhookInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWebhookResult>("launchdarkly:index/getWebhook:getWebhook", args ?? new GetWebhookInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWebhookArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique webhook ID.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The webhook's human-readable name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("secret")]
        private string? _secret;

        /// <summary>
        /// The secret used to sign the webhook.
        /// </summary>
        public string? Secret
        {
            get => _secret;
            set => _secret = value;
        }

        public GetWebhookArgs()
        {
        }
        public static new GetWebhookArgs Empty => new GetWebhookArgs();
    }

    public sealed class GetWebhookInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique webhook ID.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The webhook's human-readable name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// The secret used to sign the webhook.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public GetWebhookInvokeArgs()
        {
        }
        public static new GetWebhookInvokeArgs Empty => new GetWebhookInvokeArgs();
    }


    [OutputType]
    public sealed class GetWebhookResult
    {
        public readonly string Id;
        /// <summary>
        /// The webhook's human-readable name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Whether the webhook is enabled.
        /// </summary>
        public readonly bool On;
        /// <summary>
        /// The secret used to sign the webhook.
        /// </summary>
        public readonly string? Secret;
        /// <summary>
        /// List of policy statement blocks used to filter webhook events. For more information on webhook policy filters read [Adding a policy filter](https://docs.launchdarkly.com/integrations/webhooks#adding-a-policy-filter). To learn more, read Policy Statement Blocks.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWebhookStatementResult> Statements;
        /// <summary>
        /// Set of tags associated with the webhook.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The URL of the remote webhook.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetWebhookResult(
            string id,

            string? name,

            bool on,

            string? secret,

            ImmutableArray<Outputs.GetWebhookStatementResult> statements,

            ImmutableArray<string> tags,

            string url)
        {
            Id = id;
            Name = name;
            On = on;
            Secret = secret;
            Statements = statements;
            Tags = tags;
            Url = url;
        }
    }
}
