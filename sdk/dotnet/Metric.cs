// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Launchdarkly
{
    /// <summary>
    /// Provides a LaunchDarkly metric resource.
    /// 
    /// This resource allows you to create and manage metrics within your LaunchDarkly organization.
    /// 
    /// To learn more about metrics and experimentation, read [Experimentation Documentation](https://docs.launchdarkly.com/home/experimentation).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Launchdarkly = Pulumi.Launchdarkly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Launchdarkly.Metric("example", new()
    ///     {
    ///         ProjectKey = launchdarkly_project.Example.Key,
    ///         Key = "example-metric",
    ///         Description = "Metric description.",
    ///         Kind = "pageview",
    ///         Tags = new[]
    ///         {
    ///             "example",
    ///         },
    ///         Urls = new[]
    ///         {
    ///             new Launchdarkly.Inputs.MetricUrlArgs
    ///             {
    ///                 Kind = "substring",
    ///                 Substring = "foo",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// LaunchDarkly metrics can be imported using the metric's ID in the form `project_key/metric_key`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import launchdarkly:index/metric:Metric example example-project/example-metric-key
    /// ```
    /// </summary>
    [LaunchdarklyResourceType("launchdarkly:index/metric:Metric")]
    public partial class Metric : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the metric's purpose.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The event key to watch for `custom` metrics.
        /// </summary>
        [Output("eventKey")]
        public Output<string?> EventKey { get; private set; } = null!;

        /// <summary>
        /// Whether a metric is a active.
        /// </summary>
        [Output("isActive")]
        public Output<bool?> IsActive { get; private set; } = null!;

        /// <summary>
        /// Whether a `custom` metric is a numeric metric or not.
        /// </summary>
        [Output("isNumeric")]
        public Output<bool?> IsNumeric { get; private set; } = null!;

        /// <summary>
        /// The unique key that references the metric. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The metric type. Available choices are `click`, `custom`, and `pageview`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The userId of the user maintaining the metric.
        /// </summary>
        [Output("maintainerId")]
        public Output<string> MaintainerId { get; private set; } = null!;

        /// <summary>
        /// The human-friendly name for the metric.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The metrics's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Output("projectKey")]
        public Output<string> ProjectKey { get; private set; } = null!;

        /// <summary>
        /// A set of one or more context kinds that this metric can measure events from. Metrics can only use context kinds marked as "Available for experiments." For more information, read [Allocating experiment audiences](https://docs.launchdarkly.com/home/creating-experiments/allocation)
        /// </summary>
        [Output("randomizationUnits")]
        public Output<ImmutableArray<string>> RandomizationUnits { get; private set; } = null!;

        /// <summary>
        /// The CSS selector for `click` metrics.
        /// </summary>
        [Output("selector")]
        public Output<string?> Selector { get; private set; } = null!;

        /// <summary>
        /// The success criteria for numeric `custom` metrics.
        /// </summary>
        [Output("successCriteria")]
        public Output<string?> SuccessCriteria { get; private set; } = null!;

        /// <summary>
        /// Set of tags for the metric.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The unit for numeric `custom` metrics.
        /// </summary>
        [Output("unit")]
        public Output<string?> Unit { get; private set; } = null!;

        /// <summary>
        /// A block determining which URLs the metric watches. To learn more, read Nested Urls Blocks.
        /// </summary>
        [Output("urls")]
        public Output<ImmutableArray<Outputs.MetricUrl>> Urls { get; private set; } = null!;


        /// <summary>
        /// Create a Metric resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Metric(string name, MetricArgs args, CustomResourceOptions? options = null)
            : base("launchdarkly:index/metric:Metric", name, args ?? new MetricArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Metric(string name, Input<string> id, MetricState? state = null, CustomResourceOptions? options = null)
            : base("launchdarkly:index/metric:Metric", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Metric resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Metric Get(string name, Input<string> id, MetricState? state = null, CustomResourceOptions? options = null)
        {
            return new Metric(name, id, state, options);
        }
    }

    public sealed class MetricArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the metric's purpose.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The event key to watch for `custom` metrics.
        /// </summary>
        [Input("eventKey")]
        public Input<string>? EventKey { get; set; }

        /// <summary>
        /// Whether a metric is a active.
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// Whether a `custom` metric is a numeric metric or not.
        /// </summary>
        [Input("isNumeric")]
        public Input<bool>? IsNumeric { get; set; }

        /// <summary>
        /// The unique key that references the metric. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The metric type. Available choices are `click`, `custom`, and `pageview`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// The userId of the user maintaining the metric.
        /// </summary>
        [Input("maintainerId")]
        public Input<string>? MaintainerId { get; set; }

        /// <summary>
        /// The human-friendly name for the metric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The metrics's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("projectKey", required: true)]
        public Input<string> ProjectKey { get; set; } = null!;

        [Input("randomizationUnits")]
        private InputList<string>? _randomizationUnits;

        /// <summary>
        /// A set of one or more context kinds that this metric can measure events from. Metrics can only use context kinds marked as "Available for experiments." For more information, read [Allocating experiment audiences](https://docs.launchdarkly.com/home/creating-experiments/allocation)
        /// </summary>
        public InputList<string> RandomizationUnits
        {
            get => _randomizationUnits ?? (_randomizationUnits = new InputList<string>());
            set => _randomizationUnits = value;
        }

        /// <summary>
        /// The CSS selector for `click` metrics.
        /// </summary>
        [Input("selector")]
        public Input<string>? Selector { get; set; }

        /// <summary>
        /// The success criteria for numeric `custom` metrics.
        /// </summary>
        [Input("successCriteria")]
        public Input<string>? SuccessCriteria { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Set of tags for the metric.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The unit for numeric `custom` metrics.
        /// </summary>
        [Input("unit")]
        public Input<string>? Unit { get; set; }

        [Input("urls")]
        private InputList<Inputs.MetricUrlArgs>? _urls;

        /// <summary>
        /// A block determining which URLs the metric watches. To learn more, read Nested Urls Blocks.
        /// </summary>
        public InputList<Inputs.MetricUrlArgs> Urls
        {
            get => _urls ?? (_urls = new InputList<Inputs.MetricUrlArgs>());
            set => _urls = value;
        }

        public MetricArgs()
        {
        }
        public static new MetricArgs Empty => new MetricArgs();
    }

    public sealed class MetricState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the metric's purpose.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The event key to watch for `custom` metrics.
        /// </summary>
        [Input("eventKey")]
        public Input<string>? EventKey { get; set; }

        /// <summary>
        /// Whether a metric is a active.
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// Whether a `custom` metric is a numeric metric or not.
        /// </summary>
        [Input("isNumeric")]
        public Input<bool>? IsNumeric { get; set; }

        /// <summary>
        /// The unique key that references the metric. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The metric type. Available choices are `click`, `custom`, and `pageview`. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The userId of the user maintaining the metric.
        /// </summary>
        [Input("maintainerId")]
        public Input<string>? MaintainerId { get; set; }

        /// <summary>
        /// The human-friendly name for the metric.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The metrics's project key. A change in this field will force the destruction of the existing resource and the creation of a new one.
        /// </summary>
        [Input("projectKey")]
        public Input<string>? ProjectKey { get; set; }

        [Input("randomizationUnits")]
        private InputList<string>? _randomizationUnits;

        /// <summary>
        /// A set of one or more context kinds that this metric can measure events from. Metrics can only use context kinds marked as "Available for experiments." For more information, read [Allocating experiment audiences](https://docs.launchdarkly.com/home/creating-experiments/allocation)
        /// </summary>
        public InputList<string> RandomizationUnits
        {
            get => _randomizationUnits ?? (_randomizationUnits = new InputList<string>());
            set => _randomizationUnits = value;
        }

        /// <summary>
        /// The CSS selector for `click` metrics.
        /// </summary>
        [Input("selector")]
        public Input<string>? Selector { get; set; }

        /// <summary>
        /// The success criteria for numeric `custom` metrics.
        /// </summary>
        [Input("successCriteria")]
        public Input<string>? SuccessCriteria { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Set of tags for the metric.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The unit for numeric `custom` metrics.
        /// </summary>
        [Input("unit")]
        public Input<string>? Unit { get; set; }

        [Input("urls")]
        private InputList<Inputs.MetricUrlGetArgs>? _urls;

        /// <summary>
        /// A block determining which URLs the metric watches. To learn more, read Nested Urls Blocks.
        /// </summary>
        public InputList<Inputs.MetricUrlGetArgs> Urls
        {
            get => _urls ?? (_urls = new InputList<Inputs.MetricUrlGetArgs>());
            set => _urls = value;
        }

        public MetricState()
        {
        }
        public static new MetricState Empty => new MetricState();
    }
}
